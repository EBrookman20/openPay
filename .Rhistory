library(shiny); runApp('app_Jenna.R')
summary(payment)
## for donut plot
payment <- read_csv("payment.csv")
payment$nature.of.payment <- as.factor(payment$nature.of.payment)
cities <- list("SIOUX FALLS", "RAPID CITY", "PIERRE", "WATERTOWN","VERMILLION",
"ABERDEEN", "CUSTER", "MITCHELL", "SPEARFISH", "BROOKINGS")
summary(payment)
library(readr)
Open_Payment_south_dakota_2013_18 <- read_csv("Open_Payment_south_dakota_2013-18.csv",
col_types = cols_only(physician_first_name = col_guess(),
physician_last_name = col_guess(),
recipient_city = col_guess(), total_amount_of_payment_usdollars = col_guess()))
View(Open_Payment_south_dakota_2013_18)
runApp('app_Jenna.R')
?paste
###########################
# Assignment 10 Shiny App #
###########################
library(shiny)
library(plotly)
library(DT)
library(ggplot2)
library(plotly)
library(tidyverse)
library(sf) ## Overall handling of sf objects
library(cartography) ## Plotting maps package
library(tigris)
###########################
# Assignment 10 Shiny App #
###########################
library(shiny)
library(plotly)
library(DT)
intall.packages("DT")
install.packages("DT")
###########################
# Assignment 10 Shiny App #
###########################
library(shiny)
library(plotly)
library(DT)
# Define UI for application that draws a histogram
fluidPage(
# Application title
titlePanel("Doctor's Payments In South Dakota (2013-2018)"
),
# Main Panel
mainPanel(
## Text Output and Styles
tags$head(
tags$style("#txtOutput2{color: steelblue;
font-size: 17px;
font-style: bold;
font-family: Arial;
}"),
tags$style("#txtOutput3{color: steelblue;
font-size: 17px;
font-style: bold;
font-family: Arial;
}"),
tags$style("#txtOutput4{color: steelblue;
font-size: 17px;
font-style: bold;
font-family: Arial;
}"),
tags$style("#city{font-size: 17px;}")
),
## Tabs Panel
tags$head(
tags$style(
type = "text/css",
".nav-tabs {font-size: 18px} "
)
),
tabsetPanel(
type = "tabs",
tabPanel(
"City",
uiOutput("city"),
plotlyOutput("donut_plot"),
verbatimTextOutput("txtOutput2")
),
tabPanel(
"Zipcode",
plotOutput("sd_map"),
verbatimTextOutput("txtOutput3")
),
tabPanel("Country",
sidebarLayout(
sidebarPanel(
titlePanel("Payments by Country"),
selectInput("predictors", h3("Select Variable"),
choices = c('Physician_Primary_Type',
'Related_Product_Indicator',
'Charity_Indicator',
'Form_of_Payment_or_Transfer_of_Value')
)
),
mainPanel(plotOutput("country"))
),
verbatimTextOutput("txtOutput4")
),
tabPanel(
"Total & Type",
verbatimTextOutput("Emmatxt")
),
tabPanel(
"Summaries",
verbatimTextOutput("Gracetxt")
),
tabPanel(
"About",
verbatimTextOutput("Abouttxt")
),
### Tab for total payments by physician, Marie
tabPanel(
"Payments by physician",
verbatimTextOutput("Marietxt"),
sidebarLayout(
sidebarPanel(
titlePanel("Total payments received per physician"),
selectInput("city",
h3("City of interest:"),
choices = c("SIOUX FALLS",
"BROOKINGS",
"ABERDEEN",
"PINE RIDGE",
"GROTON",
"RAPID CITY"))
),
mainPanel(plotlyOutput("MariePlotly"))
)
),
###Jakob's Addition
tabPanel(
"Payment Over Time",
plotOutput("jfplot", click = "plot_click"),
tableOutput("jfdatatable"),
verbatimTextOutput("txtOutput3")
),
),
width = 12
)
)
library(ggplot2)
library(plotly)
library(tidyverse)
library(sf) ## Overall handling of sf objects
library(cartography) ## Plotting maps package
library(tigris) ## For downloading the zipcode map
# Define server logic required to draw a histogram
server <- function(input, output, session) {
## Text Outputs
output$txtOutput2 <- renderText({
paste0("Nature of Payments: Categories describing what form or type
of payment was made.")
})
output$txtOutput3 <- renderText({
paste0("Amount: For each zipcode, a cumulative total of the dollar amount
from every payment over the years 2013-18.")
})
output$txtOutput4 <- renderText({
paste0("List of countries, except the US, who made payments.")
})
output$Gracetxt <- renderText({
paste0("Summary Payments: Summary statistics for payments in each category
of doctor for each year from 2013 to 2018.")
})
output$Emmatxt <- renderText({
paste0("Total Payment Amount by Payment Type and Profession")
})
output$Abouttxt <- renderText({
paste0("Open Payments: Payments that drug & medical device companies
make to covered recipients (physicians, nurses, etc).
Learn more at https://www.cms.gov/openpayments")
})
## 'Select City' Output
output$city <- renderUI({
selectInput("city", "Select City", choices = cities)
})
## Plot Outputs
output$donut_plot <- renderPlotly({
# this solves the error when starting up.
# if this input is not available, do not try to generate the plot
req(input$city)
## using input for city
donutdata <- filter(payment, recipient_city == input$city)
## create dataframe
donutdata2 <- data.frame(
cat = levels(donutdata$nature.of.payment),
count = tapply(
donutdata$nature.of.payment, donutdata$nature.of.payment,
length
)
)
donutdata3 <- donutdata2 %>% drop_na(count)
## compute ymax and ymin
donutdata3$fraction <- donutdata3$count / sum(donutdata3$count)
donutdata3$ymax <- cumsum(donutdata3$fraction)
donutdata3$ymin <- c(0, head(donutdata3$ymax, n = -1))
## change font
t <- list(family = "Arial", size = 16, color = "black")
## plotting
donutdata3 <- donutdata3 %>% group_by(cat)
fig <- donutdata3 %>%
plot_ly(
labels = ~cat, values = ~fraction,
insidetextorientation = "radial"
) %>%
add_pie(hole = 0.6) %>%
layout(
showlegend = T,
legend = list(title = list(text = "Type:", font = t))
)
})
output$sd_map <- renderPlot({
## create dataframe
yourdata <- data.frame(
ZCTA5CE10 = mapdata$zippy,
Amount = mapdata$total_amount_of_payment_usdollars
)
## download a shapefile (shp,gpkg,geojson...)
options(tigris_use_cache = TRUE)
geo <- st_as_sf(zctas(cb = FALSE, state = "South Dakota", year = 2010))
## overall shape of the state
state <- st_as_sf(zctas(cb = FALSE, state = "South Dakota", year = 2010))
state <- st_transform(state, st_crs(geo))
## merge the data
yourdata.sf <- merge(geo, yourdata)
## plotting
par(mar = c(1, 1, 1, 1))
ghostLayer(yourdata.sf)
plot(st_geometry(state), add = TRUE, border = "gray")
choroLayer(yourdata.sf,
var = "Amount",
add = TRUE,
border = NA,
legend.pos = "n"
)
legendChoro(
pos = "bottomleft", title.txt = "Amount",
title.cex = 1.8, values.cex = 1.35, cex = 1.1,
breaks = c(
"$15", "$30", "$100", "$250", "$750", "$2,000",
"$6,200", "$53,000", "$7,140,000"
),
col = carto.pal(pal1 = "blue.pal", n1 = 8)
)
})
output$country <- renderPlot({
ggplot(df2, aes_string(input$predictors)) +
geom_bar(aes(fill = df2$'Applicable_Manufacturer_or_GOP_Making_Payment_Country')) +
theme(axis.title.y = element_blank(),
axis.text.y = element_blank(),
axis.ticks.y = element_blank(),
axis.title.x = element_blank(),
axis.text.x = element_text(size = 12),
legend.text = element_text(size = 19),
legend.title = element_text(size = 20)) +
guides(fill = guide_legend(title = "Country"))
})
## Interactive plotly for physician totals, Marie
output$MariePlotly <- renderPlotly({
# initiate data values
city <- input$city
# Histogram of total payment per physician
payment_totals <-
ggplot(phys_amount, aes(Total, na.rm=TRUE)) +
geom_histogram(data=subset(phys_amount,
City==city &
!is.na(Total) &
Total > 1),
fill="blue",
bins=10000) +
labs(title="Total payments ($) received per physician") +
xlab("Total payments received ($)")
ggplotly(payment_totals)
})
################
#Jakob's Addition
output$jfplot <- renderPlot({
if(input$Year == 'All'){
ggplot(jfpay3, aes(x=date, y=Payment)) + geom_point() +
xlab("Time") + scale_x_date(date_labels = "%Y", date_breaks = "1 year") +
theme(axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 12),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
}
else{
tmpstart <- "-01-01"
tmpend <- "-12-31"
str1 <- paste(input$Year, tmpstart, sep="")
str2 <- paste(input$Year, tmpend, sep="")
row.storer = NULL
for (i in 1:length(jfpay3$date)){
if (jfpay3$date[i] > str1 && jfpay3$date[i] < str2){
row.storer = c(row.storer, i)
}
}
tmp <- jfpay3[row.storer,]
ggplot(tmp, aes(x=date, y=Payment)) + geom_point() +
xlab(input$Year) + scale_x_date(date_labels = "%b", date_breaks = "1 month") +
theme(axis.title.x = element_text(size = 16),
axis.text.x = element_text(size = 16),
axis.title.y = element_text(size = 16),
axis.text.y = element_text(size = 16))
}
})
output$jfdatatable <- renderTable({
nearPoints(jfpay3, input$plot_click, xvar = "date", yvar = "Payment")
})
}
###################################
# Global variables. Data preprocess
##################################
library(tidyverse)
#Read in entire open payments data set
total_pay_data <- read_csv("Open_Payment_south_dakota_2013-18.csv")
#Make year column of when payments were made
total_pay_data$year <- substr(total_pay_data$date_of_payment, 1, 4)
## for donut plot
payment <- read_csv("payment.csv")
payment$nature.of.payment <- as.factor(payment$nature.of.payment)
cities <- list(
"SIOUX FALLS", "RAPID CITY", "PIERRE", "WATERTOWN", "VERMILLION",
"ABERDEEN", "CUSTER", "MITCHELL", "SPEARFISH", "BROOKINGS"
)
## for map plot
mapdata <- read_csv("zippy.csv")
##Caleb
### for box plot
df <- read_csv("calebpayment.csv") # only making payment country & payment total
# merge with jenna's df
df2 <- cbind(df, payment)
# remove US
df2 <- df2 %>%
filter(applicable_manufacturer_or_applicable_gpo_making_payment_country != "United States")
# rename cols
names(df2)[names(df2) == 'applicable_manufacturer_or_applicable_gpo_making_payment_country'] <- 'Applicable_Manufacturer_or_GOP_Making_Payment_Country'
names(df2)[names(df2) == 'physician_primary_type'] <- 'Physician_Primary_Type'
names(df2)[names(df2) == 'form_of_payment_or_transfer_of_value'] <- 'Form_of_Payment_or_Transfer_of_Value'
names(df2)[names(df2) == 'charity_indicator'] <- 'Charity_Indicator'
names(df2)[names(df2) == 'related_product_indicator'] <- 'Related_Product_Indicator'
names(df2)[names(df2) == 'nature.of.payment'] <- 'Nature_of_Payment'
names(df2)[names(df2) == 'recipient_city'] <- 'Recipient_City'
df2$'Applicable_Manufacturer_or_GOP_Making_Payment_Country' <- as.factor(df2$'Applicable_Manufacturer_or_GOP_Making_Payment_Country')
df2$'Physician_Primary_Type' <- as.factor(df2$'Physician_Primary_Type')
df2$'Form_of_Payment_or_Transfer_of_Value' <- as.factor(df2$'Form_of_Payment_or_Transfer_of_Value')
df2$'Related_Product_Indicator' <- as.factor(df2$'Related_Product_Indicator')
df2$'Charity_Indicator' <- as.factor(df2$'Charity_Indicator')
#############
# Uses Hanna's full data frame
# Create single name variable
total_pay_data$physician_full_name <-
paste(total_pay_data$physician_first_name,
total_pay_data$physician_last_name,
sep = " ")
# Total payments received by each physician
phys_amount <- aggregate(total_pay_data$total_amount_of_payment_usdollars,
by = list(total_pay_data$physician_full_name,
total_pay_data$recipient_city),
FUN = sum)
# Rename columns in physician amounts data frame
phys_amount <- phys_amount %>%
rename(Physician = Group.1,
City = Group.2,
Total = x)
###################
#Jakob's addition
jfpay <- read.csv("~jfpay.csv", stringsAsFactors=TRUE)
jfpay <- read.csv("jfpay.csv", stringsAsFactors=TRUE)
jfpay3 <- jfpay[-c(1)]
jfpay3$date <- as.Date(jfpay3$date, "%Y-%m-%d")
jfpay3$year <- as.character(jfpay3$year)
runApp()
runApp()
