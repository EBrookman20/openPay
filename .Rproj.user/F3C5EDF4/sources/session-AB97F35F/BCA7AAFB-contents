<<<<<<< Updated upstream:.Rproj.user/F3C5EDF4/sources/session-AB97F35F/BCA7AAFB-contents
###########################
# Assignment 10 Shiny App #
###########################

library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(sf)          ## Overall handling of sf objects
library(cartography) ## Plotting maps package
library(tigris)      ## For downloading the zipcode map


## for donut plot
payment <- read_csv("payment.csv")
payment$nature.of.payment <- as.factor(payment$nature.of.payment)


cities <- list("SIOUX FALLS", "RAPID CITY", "PIERRE", "WATERTOWN","VERMILLION",
            "ABERDEEN", "CUSTER", "MITCHELL", "SPEARFISH", "BROOKINGS")

## for map plot
mapdata <- read_csv("zippy.csv")



### for box plot
df <- read_csv("calebpayment.csv") # only making payment country & payment total

# merge with jenna's df
df2 <- cbind(df, payment)

# remove US
df2 <- df2 %>% 
  filter(applicable_manufacturer_or_applicable_gpo_making_payment_country != "United States")

# rename cols
names(df2)[names(df2) == 'applicable_manufacturer_or_applicable_gpo_making_payment_country'] <- 'Applicable_Manufacturer_or_GOP_Making_Payment_Country'
names(df2)[names(df2) == 'physician_primary_type'] <- 'Physician_Primary_Type'
names(df2)[names(df2) == 'form_of_payment_or_transfer_of_value'] <- 'Form_of_Payment_or_Transfer_of_Value'
names(df2)[names(df2) == 'charity_indicator'] <- 'Charity_Indicator'
names(df2)[names(df2) == 'related_product_indicator'] <- 'Related_Product_Indicator'
names(df2)[names(df2) == 'nature.of.payment'] <- 'Nature_of_Payment'
names(df2)[names(df2) == 'recipient_city'] <- 'Recipient_City'
df2$'Applicable_Manufacturer_or_GOP_Making_Payment_Country' <- as.factor(df2$'Applicable_Manufacturer_or_GOP_Making_Payment_Country')
df2$'Physician_Primary_Type' <- as.factor(df2$'Physician_Primary_Type')
df2$'Form_of_Payment_or_Transfer_of_Value' <- as.factor(df2$'Form_of_Payment_or_Transfer_of_Value')
df2$'Related_Product_Indicator' <- as.factor(df2$'Related_Product_Indicator')
df2$'Charity_Indicator' <- as.factor(df2$'Charity_Indicator')

# Define UI for application that draws a histogram
ui <- fluidPage(

  
    # Application title
    titlePanel(h1("Open Payments In South Dakota (2013-2018)",
                  align = "center")
               ),

    
    # Sidebar with a select input for City 
    sidebarLayout(
      
      
        sidebarPanel(width = 0),
        fluid = TRUE,
      
        
        mainPanel(
          
          
          ## Text Output and Styles
          verbatimTextOutput("txtOutput"),
          tags$head(tags$style("#txtOutput{color: steelblue;
                                 font-size: 18px;
                                 font-style: bold;
                                 font-family: Arial;
                                 }"
                               ),
                    tags$style("#txtOutput2{color: steelblue;
                                 font-size: 17px;
                                 font-style: bold;
                                 font-family: Arial;
                                 }"
                               ),
                    tags$style("#txtOutput3{color: steelblue;
                                 font-size: 17px;
                                 font-style: bold;
                                 font-family: Arial;
                                 }"
                    ),
                    tags$style("#city{font-size: 17px;}"
                               )
                   ),
          
          
          
          
          ## Tabs Panel
          tags$head(
            tags$style(type='text/css', 
                       ".nav-tabs {font-size: 18px} ")),
          tabsetPanel(type = "tabs", 
            tabPanel("Nature of Payments, by City"
                     , uiOutput("city")
                     , plotlyOutput("plot1")
                     , verbatimTextOutput("txtOutput2")),
            tabPanel("Totaled Payment Amounts, by Zipcode"
                     , plotOutput("plot2")
                     , verbatimTextOutput("txtOutput3")
                     )
                    ),
          width = 12
          
                 )
        
    )         
)

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  
  
    ## Text Outputs
    output$txtOutput = renderText({
      paste0("Open Payments: Payments that drug & medical device companies make to covered recipients (physicians, nurses, etc). ")
    })
    output$txtOutput2 = renderText({
      paste0("Nature of Payments: Categories describing what form or type of payment was made.")
    })
    output$txtOutput3 = renderText({
      paste0("Amount: For each zipcode, a cumulative total of the dollar amount from every payment over the years 2013-18.")
    })
    
    
    
    
    ## 'Select City' Output 
    output$city <- renderUI({
      selectInput("city", "Select City", choices = cities)
    })
    
    
    
    
    ## Plot Outputs
    output$plot1 <- renderPlotly({
      
      ## using input for city
      donutdata <- filter(payment, recipient_city == input$city)

      ## create dataframe
      donutdata2 <- data.frame(
        cat = levels(donutdata$nature.of.payment),
        count = tapply(donutdata$nature.of.payment, donutdata$nature.of.payment,
                       length)
        )
      donutdata3 <- donutdata2 %>% drop_na(count)
      
      ## compute ymax and ymin
      donutdata3$fraction = donutdata3$count / sum(donutdata3$count)
      donutdata3$ymax = cumsum(donutdata3$fraction)
      donutdata3$ymin = c(0, head(donutdata3$ymax, n = -1))
      
      ## change font
      t <- list(family = "Arial", size = 16, color = "black")
      
      ## plotting
      donutdata3 <- donutdata3 %>% group_by(cat)
      fig <- donutdata3 %>% 
        plot_ly(labels = ~cat, values = ~fraction,
                insidetextorientation='radial') %>%
        add_pie(hole = 0.6) %>%
        layout(showlegend = T,
               legend = list(title = list(text = "Type:", font = t))
              )
    })
    
    
    
    
    output$plot2 <- renderPlot({
      
      ## create dataframe
      yourdata <- data.frame(ZCTA5CE10 = mapdata$zippy,
                             Amount = mapdata$total_amount_of_payment_usdollars
                            )
      
      ## download a shapefile (shp,gpkg,geojson...)
      options(tigris_use_cache = TRUE)
      geo <- st_as_sf(zctas(cb = FALSE, state = "South Dakota", year = 2010))
      
      ## overall shape of the state
      state <- st_as_sf(zctas(cb = FALSE, state = "South Dakota", year = 2010))
      state = st_transform(state, st_crs(geo))
      
      ## merge the data
      yourdata.sf = merge(geo, yourdata)
      
      ## plotting
      par(mar=c(1,1,1,1))
      ghostLayer(yourdata.sf)
      plot(st_geometry(state), add = TRUE, border = "gray")
      choroLayer(yourdata.sf,
                 var = "Amount",
                 add = TRUE,
                 border = NA,
                 legend.pos = "n"
                )
      legendChoro(pos = "bottomleft", title.txt = "Amount",
                  title.cex = 1.8, values.cex = 1.35, cex = 1.1,
                  breaks = c("$15","$30", "$100", "$250", "$750", "$2,000", 
                             "$6,200", "$53,000", "$7,140,000"), 
                  col = carto.pal(pal1 = "blue.pal", n1 = 8)
                 )
      
    })
    
}

# Run the application 
shinyApp(ui = ui, server = server)

=======
###########################
# Assignment 10 Shiny App #
###########################

library(shiny)
library(ggplot2)
library(plotly)
library(tidyverse)
library(sf)          ## Overall handling of sf objects
library(cartography) ## Plotting maps package
library(tigris)      ## For downloading the zipcode map


## for donut plot
payment <- read_csv("payment.csv")
payment$nature.of.payment <- as.factor(payment$nature.of.payment)

cities <- list("SIOUX FALLS", "RAPID CITY", "PIERRE", "WATERTOWN","VERMILLION",
            "ABERDEEN", "CUSTER", "MITCHELL", "SPEARFISH", "BROOKINGS")

## for map plot
mapdata <- read_csv("zippy.csv")






# Define UI for application that draws a histogram
ui <- fluidPage(

  
    # Application title
    titlePanel(h1("Open Payments In South Dakota (2013-2018)",
                  align = "center")
               ),

    
    # Sidebar with a select input for City 
    sidebarLayout(
      
      
        sidebarPanel(width = 0),
        fluid = TRUE,
      
        
        mainPanel(
          
          
          ## Text Output and Styles
          verbatimTextOutput("txtOutput"),
          tags$head(tags$style("#txtOutput{color: steelblue;
                                 font-size: 18px;
                                 font-style: bold;
                                 font-family: Arial;
                                 }"
                               ),
                    tags$style("#txtOutput2{color: steelblue;
                                 font-size: 17px;
                                 font-style: bold;
                                 font-family: Arial;
                                 }"
                               ),
                    tags$style("#txtOutput3{color: steelblue;
                                 font-size: 17px;
                                 font-style: bold;
                                 font-family: Arial;
                                 }"
                    ),
                    tags$style("#city{font-size: 17px;}"
                               )
                   ),
          
          
          
          
          ## Tabs Panel
          tags$head(
            tags$style(type='text/css', 
                       ".nav-tabs {font-size: 18px} ")),
          tabsetPanel(type = "tabs", 
            tabPanel("Nature of Payments, by City"
                     , uiOutput("city")
                     , plotlyOutput("plot1")
                     , verbatimTextOutput("txtOutput2")),
            tabPanel("Totaled Payment Amounts, by Zipcode"
                     , plotOutput("plot2")
                     , verbatimTextOutput("txtOutput3")
                     ),
            tabPanel("Marie's tab")
                    ),
          width = 12
          
                 )
        
    )         
)

# Define server logic required to draw a histogram
server <- function(input, output, session) {
  
  
  
    ## Text Outputs
    output$txtOutput = renderText({
      paste0("Open Payments: Payments that drug & medical device companies make to covered recipients (physicians, nurses, etc). ")
    })
    output$txtOutput2 = renderText({
      paste0("Nature of Payments: Categories describing what form or type of payment was made.")
    })
    output$txtOutput3 = renderText({
      paste0("Amount: For each zipcode, a cumulative total of the dollar amount from every payment over the years 2013-18.")
    })
    
    
    
    
    ## 'Select City' Output 
    output$city <- renderUI({
      selectInput("city", "Select City", choices = cities)
    })
    
    
    
    
    ## Plot Outputs
    output$plot1 <- renderPlotly({
      
      ## using input for city
      donutdata <- filter(payment, recipient_city == input$city)

      ## create dataframe
      donutdata2 <- data.frame(
        cat = levels(donutdata$nature.of.payment),
        count = tapply(donutdata$nature.of.payment, donutdata$nature.of.payment,
                       length)
        )
      donutdata3 <- donutdata2 %>% drop_na(count)
      
      ## compute ymax and ymin
      donutdata3$fraction = donutdata3$count / sum(donutdata3$count)
      donutdata3$ymax = cumsum(donutdata3$fraction)
      donutdata3$ymin = c(0, head(donutdata3$ymax, n = -1))
      
      ## change font
      t <- list(family = "Arial", size = 16, color = "black")
      
      ## plotting
      donutdata3 <- donutdata3 %>% group_by(cat)
      fig <- donutdata3 %>% 
        plot_ly(labels = ~cat, values = ~fraction,
                insidetextorientation='radial') %>%
        add_pie(hole = 0.6) %>%
        layout(showlegend = T,
               legend = list(title = list(text = "Type:", font = t))
              )
    })
    
    
    
    
    output$plot2 <- renderPlot({
      
      ## create dataframe
      yourdata <- data.frame(ZCTA5CE10 = mapdata$zippy,
                             Amount = mapdata$total_amount_of_payment_usdollars
                            )
      
      ## download a shapefile (shp,gpkg,geojson...)
      options(tigris_use_cache = TRUE)
      geo <- st_as_sf(zctas(cb = FALSE, state = "South Dakota", year = 2010))
      
      ## overall shape of the state
      state <- st_as_sf(zctas(cb = FALSE, state = "South Dakota", year = 2010))
      state = st_transform(state, st_crs(geo))
      
      ## merge the data
      yourdata.sf = merge(geo, yourdata)
      
      ## plotting
      par(mar=c(1,1,1,1))
      ghostLayer(yourdata.sf)
      plot(st_geometry(state), add = TRUE, border = "gray")
      choroLayer(yourdata.sf,
                 var = "Amount",
                 add = TRUE,
                 border = NA,
                 legend.pos = "n"
                )
      legendChoro(pos = "bottomleft", title.txt = "Amount",
                  title.cex = 1.8, values.cex = 1.35, cex = 1.1,
                  breaks = c("$15","$30", "$100", "$250", "$750", "$2,000", 
                             "$6,200", "$53,000", "$7,140,000"), 
                  col = carto.pal(pal1 = "blue.pal", n1 = 8)
                 )
      
    })
    
}

# Run the application 
shinyApp(ui = ui, server = server)

>>>>>>> Stashed changes:app_Jenna.R
